export declare class Ascii {
    readonly dataType: DataTypeId;
    components: string[];
    constructor(...components: string[]);
    get size(): number;
}

export declare class Byte extends Numeric {
    readonly dataType: DataTypeId;
}

export declare const BYTE_ORDER: Record<ByteOrder, number>;

export declare const BYTE_ORDER_SIZE = 2;

export declare enum ByteOrder {
    BIG_ENDIAN = 0,
    LITTLE_ENDIAN = 1
}

export declare interface Chunk {
    size: number;
    type: ChunkType;
    typeData: Uint8Array;
    data: Uint8Array;
    crc: number;
}

export declare enum ChunkType {
    PLTE = "PLTE",
    ACTL = "acTL",
    BKGD = "bKGD",
    CHRM = "cHRM",
    CICP = "cICP",
    CABX = "caBX",
    DSIG = "dSIG",
    EXIF = "eXIf",
    FRAC = "fRAc",
    GAMA = "gAMA",
    GIFG = "gIFg",
    GIFT = "gIFt",
    GIFX = "gIFx",
    HIST = "hIST",
    ICCP = "iCCP",
    IDAT = "IDAT",
    IDOT = "iDOT",
    IEND = "IEND",
    IHDR = "IHDR",
    ITXT = "iTXt",
    OFFS = "oFFs",
    PCAL = "pCAL",
    PHYS = "pHYs",
    SBIT = "sBIT",
    SCAL = "sCAL",
    SPLT = "sPLT",
    SRGB = "sRGB",
    STER = "sTER",
    TEXT = "tEXt",
    TIME = "tIME",
    TRNS = "tRNS",
    TXMP = "tXMP",
    VPAG = "vpAg",
    ZTXT = "zTXt",
    ZXIF = "zxIf"
}

export declare function crc32(b: Uint8Array): number;

export declare function createChunk(type: ChunkType, data: Uint8Array): Chunk;

export declare enum DataTypeId {
    BYTE = 1,
    ASCII = 2,
    SHORT = 3,
    LONG = 4,
    RATIONAL = 5,
    SBYTE = 6,
    UNDEFINED = 7,
    SSHORT = 8,
    SLONG = 9,
    SRATIONAL = 10,
    FLOAT = 11,
    DOUBLE = 12
}

export declare const DataTypeSize: Record<DataTypeId, number>;

export declare class Double extends Numeric {
    readonly dataType: DataTypeId;
}

export declare interface EXIF {
    ifd0: Ifd;
}

export declare function exifWrite(ifd0: Ifd, byteOrder?: ByteOrder): Uint8Array;

export declare function exifWriteIFD(ifd: Ifd, writer: TiffWriter, hasNext?: boolean): void;

export declare function exifWriteIFDTag(tag: IfdTag, writer: TiffWriter): void;

export declare function exifWriteIFDTagValue(tagValue: IfdTagValue, writer: TiffWriter): void;

export declare class Float extends Numeric {
    readonly dataType: DataTypeId;
}

export declare interface ICCP {
    name: string;
    compressionMethod: number;
    profileDeflated: Uint8Array;
}

/**
 * ICC profiles Â© Clinton Ingram, source see https://github.com/saucecontrol/Compact-ICC-Profiles
 * License CC0-1.0, see https://github.com/saucecontrol/Compact-ICC-Profiles/blob/master/license
 *
 * Generated with update-icc-profiles.ts script
 * Note: profiles are deflated
 */
export declare const ICCProfileAdobeCompatV2Deflated: string;

export declare const ICCProfileAdobeCompatV4Deflated: string;

export declare const ICCProfileAppleCompatV2Deflated: string;

export declare const ICCProfileAppleCompatV4Deflated: string;

export declare const ICCProfileCGATS001CompatV2MicroDeflated: string;

export declare const ICCProfileColorMatchCompatV2Deflated: string;

export declare const ICCProfileColorMatchCompatV4Deflated: string;

export declare const ICCProfileDCIP3V4Deflated: string;

export declare const ICCProfileDisplayP3CompatV2MagicDeflated: string;

export declare const ICCProfileDisplayP3CompatV2MicroDeflated: string;

export declare const ICCProfileDisplayP3CompatV4Deflated: string;

export declare const ICCProfileDisplayP3V2MagicDeflated: string;

export declare const ICCProfileDisplayP3V2MicroDeflated: string;

export declare const ICCProfileDisplayP3V4Deflated: string;

export declare const ICCProfileProPhotoV2MagicDeflated: string;

export declare const ICCProfileProPhotoV2MicroDeflated: string;

export declare const ICCProfileProPhotoV4Deflated: string;

export declare const ICCProfileRec2020CompatV2MagicDeflated: string;

export declare const ICCProfileRec2020CompatV2MicroDeflated: string;

export declare const ICCProfileRec2020CompatV4Deflated: string;

export declare const ICCProfileRec2020G24V4Deflated: string;

export declare const ICCProfileRec2020V2MagicDeflated: string;

export declare const ICCProfileRec2020V2MicroDeflated: string;

export declare const ICCProfileRec2020V4Deflated: string;

export declare const ICCProfileRec601NTSCV2MagicDeflated: string;

export declare const ICCProfileRec601NTSCV2MicroDeflated: string;

export declare const ICCProfileRec601NTSCV4Deflated: string;

export declare const ICCProfileRec601PALV2MagicDeflated: string;

export declare const ICCProfileRec601PALV2MicroDeflated: string;

export declare const ICCProfileRec601PALV4Deflated: string;

export declare const ICCProfileRec709V2MagicDeflated: string;

export declare const ICCProfileRec709V2MicroDeflated: string;

export declare const ICCProfileRec709V4Deflated: string;

export declare const ICCProfilescRGBV2Deflated: string;

export declare const ICCProfilesGreyV2MagicDeflated: string;

export declare const ICCProfilesGreyV2MicroDeflated: string;

export declare const ICCProfilesGreyV2NanoDeflated: string;

export declare const ICCProfilesGreyV4Deflated: string;

export declare const ICCProfilesRGBV2MagicDeflated: string;

export declare const ICCProfilesRGBV2MicroDeflated: string;

export declare const ICCProfilesRGBV2NanoDeflated: string;

export declare const ICCProfilesRGBV4Deflated: string;

export declare const ICCProfileWideGamutCompatV2Deflated: string;

export declare const ICCProfileWideGamutCompatV4Deflated: string;

export declare class Ifd {
    id: IfdId;
    tags: IfdTag[];
    subs: Ifd[];
    constructor(id: IfdId, tags?: IfdTag[], subs?: Ifd[]);
    get size(): number;
    get headerSize(): number;
    get dataSize(): number;
    get count(): number;
}

export declare enum IfdId {
    FIRST = 0,
    THUMBNAIL = 1,
    EXIF = 2,
    GPS = 3,
    INTEROPERABILITY = 4
}

export declare const IfdIdTagId: Partial<Record<IfdId, TagId>>;

export declare class IfdTag {
    id: TagId;
    value: IfdTagValue;
    static validate: boolean;
    dataType: DataTypeId;
    constructor(id: TagId, value: IfdTagValue);
    get size(): number;
    get headerSize(): number;
    get dataSize(): number;
    get count(): number;
}

export declare type IfdTagValue = Short | SShort | Long | SLong | Float | Double | Byte | SByte | Rational | SRational | Ascii | Undefined;

export declare interface IHDR {
    imageWidth: number;
    imageHeight: number;
    bitDepth: IHDRBitDepth;
    colorType: IHDRColorType;
    compressionType: IHDRCompressionType;
    filterMethod: IHDRFilterMethod;
    interlaceType: IHDRInterlaceType;
}

export declare type IHDRBitDepth = 1 | 2 | 4 | 8 | 16;

export declare enum IHDRColorType {
    GRAYSCALE = 0,
    RGB = 2,
    PALETTE = 3,
    GRAYSCALE_ALPHA = 4,
    RGB_ALPHA = 6
}

export declare enum IHDRCompressionType {
    DEFLATE = 0
}

export declare enum IHDRFilterMethod {
    ADAPTIVE = 0
}

export declare enum IHDRInterlaceType {
    NONE = 0,
    ADAM7 = 0
}

export declare abstract class IoBuffer {
    data: Uint8Array;
    readonly byteOrder: ByteOrder;
    protected view: DataView;
    protected _offset: number;
    protected offsets: number[];
    protected readonly littleEndian: boolean;
    constructor(data: Uint8Array, byteOrder?: ByteOrder);
    get offset(): number;
    pushOffset(offset: number): void;
    popOffset(): number;
    skipOffset(bytesLength: number): void;
}

export declare function isPNG(data: Uint8Array): boolean;

export declare interface ITXT {
    key: string;
    compressionFlag: boolean;
    compressionMethod: number;
    languageTag: string;
    translatedKey: string;
    value: string;
}

export declare class Long extends Numeric {
    readonly dataType: DataTypeId;
}

export declare abstract class Numeric {
    readonly dataType: DataTypeId;
    components: number[];
    constructor(...components: number[]);
    get size(): number;
}

export declare const PNG_SIGNATURE: Uint8Array;

export declare function pngRead(data: Uint8Array): Chunk[];

export declare function pngReadICCP(chunk: Chunk): ICCP;

export declare function pngReadITXT(chunk: Chunk): ITXT;

export declare function pngReadTEXT(chunk: Chunk): TEXT;

export declare function pngWrite(chunks: Chunk[]): Uint8Array;

export declare function pngWriteEXIF(content: EXIF): Chunk;

export declare function pngWriteICCP(content: ICCP): Chunk;

export declare function pngWriteITXT(content: ITXT): Chunk;

export declare function pngWriteTEXT(content: TEXT): Chunk;

export declare class Rational {
    readonly dataType: DataTypeId;
    components: Array<[number, number]>;
    constructor(...components: Array<[number, number]>);
    get size(): number;
}

export declare class Reader extends IoBuffer {
    data: Uint8Array;
    readonly byteOrder: ByteOrder;
    protected textDecoder: TextDecoder;
    constructor(data: Uint8Array, byteOrder?: ByteOrder);
    getUint8(): number;
    getInt8(): number;
    getUint16(): number;
    getInt16(): number;
    getUint32(): number;
    getInt32(): number;
    getFloat32(): number;
    getFloat64(): number;
    get(byteLength?: number | undefined): Uint8Array;
    getString(byteLength?: number | undefined): string;
    getNullTerminatedByteString(): string;
}

export declare class SByte extends Numeric {
    readonly dataType: DataTypeId;
}

export declare class Short extends Numeric {
    readonly dataType: DataTypeId;
}

export declare class SLong extends Numeric {
    readonly dataType: DataTypeId;
}

export declare class SRational {
    readonly dataType: DataTypeId;
    components: Array<[number, number]>;
    constructor(...components: Array<[number, number]>);
    get size(): number;
}

export declare class SShort extends Numeric {
    readonly dataType: DataTypeId;
}

export declare function stringDecode(b: Uint8Array): string;

export declare function stringEncode(s: string): Uint8Array;

export declare enum TagExifId {
    ExposureTime = 33434,
    FNumber = 33437,
    ExposureProgram = 34850,
    SpectralSensitivity = 34852,
    ISO = 34855,
    TimeZoneOffset = 34858,
    SelfTimerMode = 34859,
    SensitivityType = 34864,
    StandardOutputSensitivity = 34865,
    RecommendedExposureIndex = 34866,
    ISOSpeed = 34867,
    ISOSpeedLatitudeyyy = 34868,
    ISOSpeedLatitudezzz = 34869,
    ExifVersion = 36864,
    DateTimeOriginal = 36867,
    CreateDate = 36868,
    GooglePlusUploadCode = 36873,
    OffsetTime = 36880,
    OffsetTimeOriginal = 36881,
    OffsetTimeDigitized = 36882,
    ComponentsConfiguration = 37121,
    CompressedBitsPerPixel = 37122,
    ShutterSpeedValue = 37377,
    ApertureValue = 37378,
    BrightnessValue = 37379,
    ExposureCompensation = 37380,
    MaxApertureValue = 37381,
    SubjectDistance = 37382,
    MeteringMode = 37383,
    LightSource = 37384,
    Flash = 37385,
    FocalLength = 37386,
    ImageNumber = 37393,
    SecurityClassification = 37394,
    ImageHistory = 37395,
    SubjectArea = 37396,
    MakerNoteApple = 37500,
    UserComment = 37510,
    SubSecTime = 37520,
    SubSecTimeOriginal = 37521,
    SubSecTimeDigitized = 37522,
    AmbientTemperature = 37888,
    Humidity = 37889,
    Pressure = 37890,
    WaterDepth = 37891,
    Acceleration = 37892,
    CameraElevationAngle = 37893,
    FlashpixVersion = 40960,
    ColorSpace = 40961,
    ExifImageWidth = 40962,
    ExifImageHeight = 40963,
    RelatedSoundFile = 40964,
    FlashEnergy = 41483,
    FocalPlaneXResolution = 41486,
    FocalPlaneYResolution = 41487,
    FocalPlaneResolutionUnit = 41488,
    SubjectLocation = 41492,
    ExposureIndex = 41493,
    SensingMethod = 41495,
    FileSource = 41728,
    SceneType = 41729,
    CFAPattern = 41730,
    CustomRendered = 41985,
    ExposureMode = 41986,
    WhiteBalance = 41987,
    DigitalZoomRatio = 41988,
    FocalLengthIn35mmFormat = 41989,
    SceneCaptureType = 41990,
    GainControl = 41991,
    Contrast = 41992,
    Saturation = 41993,
    Sharpness = 41994,
    SubjectDistanceRange = 41996,
    ImageUniqueID = 42016,
    OwnerName = 42032,
    SerialNumber = 42033,
    LensInfo = 42034,
    LensMake = 42035,
    LensModel = 42036,
    LensSerialNumber = 42037,
    Title = 42038,
    Photographer = 42039,
    ImageEditor = 42040,
    CameraFirmware = 42041,
    RAWDevelopingSoftware = 42042,
    ImageEditingSoftware = 42043,
    MetadataEditingSoftware = 42044,
    CompositeImage = 42080,
    CompositeImageCount = 42081,
    CompositeImageExposureTimes = 42082,
    Gamma = 42240,
    Padding = 59932,
    OffsetSchema = 59933,
    OwnerNameText = 65000,
    SerialNumberText = 65001,
    Lens = 65002,
    RawFile = 65100,
    Converter = 65101,
    WhiteBalanceText = 65102,
    Exposure = 65105,
    Shadows = 65106,
    Brightness = 65107,
    ContrastText = 65108,
    SaturationText = 65109,
    SharpnessText = 65110,
    Smoothness = 65111,
    MoireFilter = 65112
}

export declare type TagId = TagIFD0SubOffsetId | TagIFD0Id | TagExifId | TagInteropId | TagOtherId;

export declare const TagIdDataType: Record<TagId, DataTypeId>;

export declare enum TagIFD0Id {
    ProcessingSoftware = 11,
    SubfileType = 254,
    OldSubfileType = 255,
    ImageWidth = 256,
    ImageHeight = 257,
    BitsPerSample = 258,
    Compression = 259,
    PhotometricInterpretation = 262,
    Thresholding = 263,
    CellWidth = 264,
    CellLength = 265,
    FillOrder = 266,
    DocumentName = 269,
    ImageDescription = 270,
    Make = 271,
    Model = 272,
    StripOffsets = 273,
    Orientation = 274,
    SamplesPerPixel = 277,
    RowsPerStrip = 278,
    StripByteCounts = 279,
    MinSampleValue = 280,
    MaxSampleValue = 281,
    XResolution = 282,
    YResolution = 283,
    PlanarConfiguration = 284,
    PageName = 285,
    XPosition = 286,
    YPosition = 287,
    GrayResponseUnit = 290,
    ResolutionUnit = 296,
    PageNumber = 297,
    TransferFunction = 301,
    Software = 305,
    ModifyDate = 306,
    Artist = 315,
    HostComputer = 316,
    Predictor = 317,
    WhitePoint = 318,
    PrimaryChromaticities = 319,
    HalftoneHints = 321,
    TileWidth = 322,
    TileLength = 323,
    SubIFD = 330,
    InkSet = 332,
    TargetPrinter = 337,
    ThumbnailOffset = 513,
    ThumbnailLength = 514,
    YCbCrCoefficients = 529,
    YCbCrSubSampling = 530,
    YCbCrPositioning = 531,
    ReferenceBlackWhite = 532,
    ApplicationNotes = 700,
    Rating = 18246,
    RatingPercent = 18249,
    Copyright = 33432,
    PixelScale = 33550,
    IPTC_NAA = 33723,
    IntergraphMatrix = 33920,
    ModelTiePoint = 33922,
    SEMInfo = 34118,
    ModelTransform = 34264,
    PhotoshopSettings = 34377,
    ICC_Profile = 34675,
    GeoTiffDirectory = 34735,
    GeoTiffDoubleParams = 34736,
    GeoTiffAsciiParams = 34737,
    ImageSourceData = 37724,
    XPTitle = 40091,
    XPComment = 40092,
    XPAuthor = 40093,
    XPKeywords = 40094,
    XPSubject = 40095,
    GDALMetadata = 42112,
    GDALNoData = 42113,
    PrintIM = 50341,
    DNGVersion = 50706,
    DNGBackwardVersion = 50707,
    UniqueCameraModel = 50708,
    LocalizedCameraModel = 50709,
    ColorMatrix1 = 50721,
    ColorMatrix2 = 50722,
    CameraCalibration1 = 50723,
    CameraCalibration2 = 50724,
    ReductionMatrix1 = 50725,
    ReductionMatrix2 = 50726,
    AnalogBalance = 50727,
    AsShotNeutral = 50728,
    AsShotWhiteXY = 50729,
    BaselineExposure = 50730,
    BaselineNoise = 50731,
    BaselineSharpness = 50732,
    LinearResponseLimit = 50734,
    CameraSerialNumber = 50735,
    DNGLensInfo = 50736,
    ShadowScale = 50739,
    SR2Private = 50740,
    MakerNoteSafety = 50741,
    CalibrationIlluminant1 = 50778,
    CalibrationIlluminant2 = 50779,
    RawDataUniqueID = 50781,
    OriginalRawFileName = 50827,
    OriginalRawFileData = 50828,
    AsShotICCProfile = 50831,
    AsShotPreProfileMatrix = 50832,
    CurrentICCProfile = 50833,
    CurrentPreProfileMatrix = 50834,
    ColorimetricReference = 50879,
    SRawType = 50885,
    PanasonicTitle = 50898,
    PanasonicTitle2 = 50899,
    CameraCalibrationSig = 50931,
    ProfileCalibrationSig = 50932,
    ProfileIFD = 50933,
    AsShotProfileName = 50934,
    ProfileName = 50936,
    ProfileHueSatMapDims = 50937,
    ProfileHueSatMapData1 = 50938,
    ProfileHueSatMapData2 = 50939,
    ProfileToneCurve = 50940,
    ProfileEmbedPolicy = 50941,
    ProfileCopyright = 50942,
    ForwardMatrix1 = 50964,
    ForwardMatrix2 = 50965,
    PreviewApplicationName = 50966,
    PreviewApplicationVersion = 50967,
    PreviewSettingsName = 50968,
    PreviewSettingsDigest = 50969,
    PreviewColorSpace = 50970,
    PreviewDateTime = 50971,
    RawImageDigest = 50972,
    OriginalRawFileDigest = 50973,
    ProfileLookTableDims = 50981,
    ProfileLookTableData = 50982,
    TimeCodes = 51043,
    FrameRate = 51044,
    TStop = 51058,
    ReelName = 51081,
    OriginalDefaultFinalSize = 51089,
    OriginalBestQualitySize = 51090,
    OriginalDefaultCropSize = 51091,
    CameraLabel = 51105,
    ProfileHueSatMapEncoding = 51107,
    ProfileLookTableEncoding = 51108,
    BaselineExposureOffset = 51109,
    DefaultBlackRender = 51110,
    NewRawImageDigest = 51111,
    RawToPreviewGain = 51112,
    DepthFormat = 51177,
    DepthNear = 51178,
    DepthFar = 51179,
    DepthUnits = 51180,
    DepthMeasureType = 51181,
    EnhanceParams = 51182,
    CalibrationIlluminant3 = 52529,
    CameraCalibration3 = 52530,
    ColorMatrix3 = 52531,
    ForwardMatrix3 = 52532,
    IlluminantData1 = 52533,
    IlluminantData2 = 52534,
    IlluminantData3 = 52535,
    ProfileHueSatMapData3 = 52537,
    ReductionMatrix3 = 52538,
    RGBTables = 52539
}

export declare enum TagIFD0SubOffsetId {
    InteropOffset = 40965,
    ExifOffset = 34665,
    GPSInfo = 34853
}

export declare enum TagInteropId {
    InteropIndex = 1,
    InteropVersion = 2,
    RelatedImageFileFormat = 4096,
    RelatedImageWidth = 4097,
    RelatedImageHeight = 4098
}

export declare enum TagOtherId {
    FreeOffsets = 288,
    FreeByteCounts = 289,
    GrayResponseCurve = 291,
    T4Options = 292,
    T6Options = 293,
    ColorResponseUnit = 300,
    ColorMap = 320,
    TileOffsets = 324,
    TileByteCounts = 325,
    BadFaxLines = 326,
    CleanFaxData = 327,
    ConsecutiveBadFaxLines = 328,
    InkNames = 333,
    NumberofInks = 334,
    DotRange = 336,
    ExtraSamples = 338,
    SMinSampleValue = 340,
    SMaxSampleValue = 341,
    TransferRange = 342,
    ClipPath = 343,
    XClipPathUnits = 344,
    YClipPathUnits = 345,
    Indexed = 346,
    JPEGTables = 347,
    OPIProxy = 351,
    GlobalParametersIFD = 400,
    ProfileType = 401,
    FaxProfile = 402,
    CodingMethods = 403,
    VersionYear = 404,
    ModeNumber = 405,
    Decode = 433,
    DefaultImageColor = 434,
    T82Options = 435,
    JPEGTables2 = 437,
    JPEGProc = 512,
    JPEGRestartInterval = 515,
    JPEGLosslessPredictors = 517,
    JPEGPointTransforms = 518,
    JPEGQTables = 519,
    JPEGDCTables = 520,
    JPEGACTables = 521,
    StripRowCounts = 559,
    USPTOMiscellaneous = 999,
    XP_DIP_XML = 18247,
    StitchInfo = 18248,
    SonyRawFileType = 28672,
    SonyToneCurve = 28688,
    ImageID = 32781,
    WangTag1 = 32931,
    WangAnnotation = 32932,
    WangTag3 = 32933,
    WangTag4 = 32934,
    ImageReferencePoints = 32953,
    RegionXformTackPoint = 32954,
    WarpQuadrilateral = 32955,
    AffineTransformMat = 32956,
    Matteing = 32995,
    DataType = 32996,
    ImageDepth = 32997,
    TileDepth = 32998,
    ImageFullWidth = 33300,
    ImageFullHeight = 33301,
    TextureFormat = 33302,
    WrapModes = 33303,
    FovCot = 33304,
    MatrixWorldToScreen = 33305,
    MatrixWorldToCamera = 33306,
    Model2 = 33405,
    BatteryLevel = 33423,
    KodakIFD = 33424,
    MDFileTag = 33445,
    MDScalePixel = 33446,
    MDColorTable = 33447,
    MDLabName = 33448,
    MDSampleInfo = 33449,
    MDPrepDate = 33450,
    MDPrepTime = 33451,
    MDFileUnits = 33452,
    AdventScale = 33589,
    AdventRevision = 33590,
    UIC1Tag = 33628,
    UIC2Tag = 33629,
    UIC3Tag = 33630,
    UIC4Tag = 33631,
    IntergraphPacketData = 33918,
    IntergraphFlagRegisters = 33919,
    INGRReserved = 33921,
    Site = 34016,
    ColorSequence = 34017,
    IT8Header = 34018,
    RasterPadding = 34019,
    BitsPerRunLength = 34020,
    BitsPerExtendedRunLength = 34021,
    ColorTable = 34022,
    ImageColorIndicator = 34023,
    BackgroundColorIndicator = 34024,
    ImageColorValue = 34025,
    BackgroundColorValue = 34026,
    PixelIntensityRange = 34027,
    TransparencyIndicator = 34028,
    ColorCharacterization = 34029,
    HCUsage = 34030,
    TrapIndicator = 34031,
    CMYKEquivalent = 34032,
    AFCP_IPTC = 34152,
    PixelMagicJBIGOptions = 34232,
    JPLCartoIFD = 34263,
    WB_GRGBLevels = 34306,
    LeafData = 34310,
    TIFF_FXExtensions = 34687,
    MultiProfiles = 34688,
    SharedData = 34689,
    T88Options = 34690,
    ImageLayer = 34732,
    JBIGOptions = 34750,
    Opto_ElectricConvFactor = 34856,
    Interlace = 34857,
    FaxRecvParams = 34908,
    FaxSubAddress = 34909,
    FaxRecvTime = 34910,
    FedexEDR = 34929,
    LeafSubIFD = 34954,
    FlashEnergy = 37387,
    SpatialFrequencyResponse = 37388,
    Noise = 37389,
    FocalPlaneXResolution = 37390,
    FocalPlaneYResolution = 37391,
    FocalPlaneResolutionUnit = 37392,
    ExposureIndex = 37397,
    TIFF_EPStandardID = 37398,
    SensingMethod = 37399,
    CIP3DataFile = 37434,
    CIP3Sheet = 37435,
    CIP3Side = 37436,
    StoNits = 37439,
    MSDocumentText = 37679,
    MSPropertySetStorage = 37680,
    MSDocumentTextPosition = 37681,
    SamsungRawPointersOffset = 40976,
    SamsungRawPointersLength = 40977,
    SamsungRawByteOrder = 41217,
    SamsungRawUnknown = 41218,
    SpatialFrequencyResponse2 = 41484,
    Noise2 = 41485,
    ImageNumber = 41489,
    SecurityClassification = 41490,
    ImageHistory = 41491,
    TIFF_EPStandardID2 = 41494,
    DeviceSettingDescription = 41995,
    ExpandSoftware = 44992,
    ExpandLens = 44993,
    ExpandFilm = 44994,
    ExpandFilterLens = 44995,
    ExpandScanner = 44996,
    ExpandFlashLamp = 44997,
    HasselbladRawImage = 46275,
    PixelFormat = 48129,
    Transformation = 48130,
    Uncompressed = 48131,
    ImageType = 48132,
    ImageWidth = 48256,
    ImageHeight = 48257,
    WidthResolution = 48258,
    HeightResolution = 48259,
    ImageOffset = 48320,
    ImageByteCount = 48321,
    AlphaOffset = 48322,
    AlphaByteCount = 48323,
    ImageDataDiscard = 48324,
    AlphaDataDiscard = 48325,
    OceScanjobDesc = 50215,
    OceApplicationSelector = 50216,
    OceIDNumber = 50217,
    OceImageLogic = 50218,
    Annotations = 50255,
    HasselbladExif = 50459,
    OriginalFileName = 50547,
    USPTOOriginalContentType = 50560,
    CR2CFAPattern = 50656,
    RawImageSegmentation = 50752,
    AliasLayerMetadata = 50784,
    SubTileBlockSize = 50974,
    RowInterleaveFactor = 50975,
    NikonNEFInfo = 51157,
    KDC_IFD = 65024
}

export declare interface TEXT {
    key: string;
    value: string;
}

export declare const TIFF_HEADER = 42;

export declare const TIFF_HEADER_SIZE = 2;

export declare class TiffWriter extends Writer {
    data: Uint8Array;
    readonly byteOrder: ByteOrder;
    private _endOffset;
    constructor(data: Uint8Array, byteOrder?: ByteOrder);
    get endOffset(): number;
    skipEndOffset(bytesLength: number): void;
    pushEndOffset(): void;
    popEndOffset(): number;
    byte(value: number): void;
    sByte(value: number): void;
    short(value: number): void;
    sShort(value: number): void;
    long(value: number): void;
    sLong(value: number): void;
    float(value: number): void;
    double(value: number): void;
    rational(numerator: number, denominator: number): void;
    sRational(numerator: number, denominator: number): void;
    ascii(value: string): void;
}

export declare class Undefined {
    readonly dataType: DataTypeId;
    components: Uint8Array;
    constructor(components: Uint8Array);
    get size(): number;
}

export declare class Writer extends IoBuffer {
    data: Uint8Array;
    readonly byteOrder: ByteOrder;
    protected textEncoder: TextEncoder;
    constructor(data: Uint8Array, byteOrder?: ByteOrder);
    setUint8(value: number): void;
    setInt8(value: number): void;
    setUint16(value: number): void;
    setInt16(value: number): void;
    setUint32(value: number): void;
    setInt32(value: number): void;
    setFloat32(value: number): void;
    setFloat64(value: number): void;
    set(data: Uint8Array): void;
    setNullTerminatedByteString(value: string): void;
    setString(value: string): void;
}

export { }
